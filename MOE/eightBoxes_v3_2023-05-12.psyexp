<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'Max number of trials': '[5, 8]', 'Audio': &quot;['Yes', 'No']&quot;, 'Debug': &quot;['No', 'Yes']&quot;}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['resources/aud/8 boxes Slide 3_Trimmed.m4a', 'resources/aud/8 boxes End of Game.m4a', 'resources/aud/8 boxes Slide 1.m4a', 'resources/aud/8 boxes Slide 2.m4a', 'resources/aud/8 boxes Slide 3.m4a', 'resources/aud/8 boxes Slide 4.m4a', 'resources/aud/8 boxes Trials 1-8 Recall.m4a', 'resources/imgs/apple.png', 'resources/imgs/banana.png', 'resources/imgs/box.png', 'resources/imgs/cherries.png', 'resources/imgs/continue.png', 'resources/imgs/empty-box.png', 'resources/imgs/grapes.png', 'resources/imgs/orange.png', 'resources/imgs/pineapple.png', 'resources/imgs/strawberry.png', 'resources/imgs/watermelon.png', 'resources/seqs/conditions_v3.csv']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="eightBoxes_v3" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="part1">
      <CodeComponent name="part1_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (SKIP_PART_1) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;OBJ_DURATION = 1.0;&amp;#10;BLANK_DURATION = OBJ_DURATION;&amp;#10;visible = [];&amp;#10;visible_t = [];&amp;#10;n_omissions = [];&amp;#10;n_commissions = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    visible.push(false);&amp;#10;    visible_t.push(null);&amp;#10;    n_omissions.push(0);&amp;#10;    n_commissions.push(0);&amp;#10;}&amp;#10;correct_boxes = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(n_fruits), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    correct_boxes.push(`box${(idxs[i] + 1)}`);&amp;#10;    correct_choices[idxs[i]] = fruit_basket[i].name;&amp;#10;}&amp;#10;correct_boxes.sort();&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if ((objs[i] === null)) {&amp;#10;        objs[i] = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `blank${(i + 1)}`, &quot;image&quot;: &quot;resources/imgs/empty-box.png&quot;, &quot;pos&quot;: BOXES_XY[i], &quot;size&quot;: OBJ_SIZE});&amp;#10;    }&amp;#10;}&amp;#10;clicked_boxes = [];&amp;#10;click_times = [];&amp;#10;first_click = true;&amp;#10;update_time_elapsed = false;&amp;#10;obj_count = 0;&amp;#10;task_time_start = null;&amp;#10;task_time_elapsed = 0.0;&amp;#10;highlighter = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;highlighter&quot;, &quot;image&quot;: &quot;resources/imgs/box.png&quot;, &quot;pos&quot;: BOXES_XY[0], &quot;size&quot;: BOX_SIZE, &quot;opacity&quot;: 0.5});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;# *** THIS ROUTINE HAS NOT BEEN MAINTAINED ***&amp;#10;&amp;#10;# Part 1 is where the objects are revealed for a &amp;#10;# while, then hidden, and the subject has to &amp;#10;# recall where. This will be skipped for now, &amp;#10;# but one thing still needs to be done here: &amp;#10;# moving the object to the space above the boxes. &amp;#10;# If Part 1 is becomes completely unnecessary, &amp;#10;# the relevant logic can be copied over to &amp;#10;# Part 2, then Part 1 can be deleted.&amp;#10;&amp;#10;#found_fruits = []&amp;#10;&amp;#10;if SKIP_PART_1:&amp;#10;    continueRoutine = False&amp;#10;#else:&amp;#10;#    for obj in objs:&amp;#10;#        if obj is not None:&amp;#10;#            found_fruits.append(obj)&amp;#10;&amp;#10;OBJ_DURATION = 1.0  # Seconds&amp;#10;BLANK_DURATION = OBJ_DURATION&amp;#10;&amp;#10;# Initialize some containers&amp;#10;visible = []&amp;#10;visible_t = []&amp;#10;n_omissions = []&amp;#10;n_commissions = []&amp;#10;for i in range(N_BOXES):&amp;#10;    visible.append(False)&amp;#10;    visible_t.append(None)&amp;#10;    n_omissions.append(0)&amp;#10;    n_commissions.append(0)&amp;#10;&amp;#10;correct_boxes = []&amp;#10;for i in range(n_fruits):&amp;#10;    correct_boxes.append(f&quot;box{idxs[i] + 1}&quot;)&amp;#10;    correct_choices[idxs[i]] = fruit_basket[i].name&amp;#10;correct_boxes.sort()&amp;#10;&amp;#10;# Fill the rest with blanks&amp;#10;for i in range(N_BOXES):&amp;#10;    if objs[i] is None:&amp;#10;        objs[i] = visual.ImageStim(&amp;#10;            win=win,&amp;#10;            name=f&quot;blank{i + 1}&quot;,&amp;#10;            image=&quot;resources/imgs/empty-box.png&quot;,&amp;#10;            pos=BOXES_XY[i],&amp;#10;            size=OBJ_SIZE&amp;#10;        )&amp;#10;&amp;#10;# Other collections&amp;#10;clicked_boxes = []&amp;#10;click_times = []&amp;#10;&amp;#10;# Flags&amp;#10;first_click = True&amp;#10;update_time_elapsed = False&amp;#10;&amp;#10;# Variables&amp;#10;obj_count = 0&amp;#10;task_time_start = None&amp;#10;task_time_elapsed = 0.0&amp;#10;&amp;#10;highlighter = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name=&quot;highlighter&quot;,&amp;#10;    image=&quot;resources/imgs/box.png&quot;,&amp;#10;    pos=BOXES_XY[0],&amp;#10;    size=BOX_SIZE,&amp;#10;    opacity=0.5&amp;#10;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;if not SKIP_PART_1:&amp;#10;    if update_time_elapsed:&amp;#10;        task_time_elapsed = t - task_time_start&amp;#10;&amp;#10;    highlighter.setSize((0, 0), log=False)&amp;#10;    for i in range(N_BOXES):&amp;#10;        # Skip those currently visible&amp;#10;        if visible[i]:&amp;#10;            continue&amp;#10;        if MOUSE.isPressedIn(boxes[i]):&amp;#10;            # Start timer on first click&amp;#10;            if first_click:&amp;#10;                task_time_start = t&amp;#10;                update_time_elapsed = True&amp;#10;                first_click = False&amp;#10;            # Determine category of selection&amp;#10;            if &quot;blank&quot; not in objs[i].name:&amp;#10;                obj_count += 1&amp;#10;                if obj_count &gt;= n_fruits:&amp;#10;                    update_time_elapsed = False&amp;#10;            elif &quot;_blank&quot; in objs[i].name:&amp;#10;                n_commissions[i] += 1&amp;#10;            else:&amp;#10;                n_omissions[i] += 1&amp;#10;            # Record selection&amp;#10;            clicked_boxes.append(boxes[i].name)&amp;#10;            click_times.append(task_time_elapsed)&amp;#10;            # Make selection visible&amp;#10;            objs[i].setAutoDraw(True, log=False)&amp;#10;            visible[i] = True&amp;#10;            visible_t[i] = t&amp;#10;            break&amp;#10;        # On-mouseover effect&amp;#10;        elif boxes[i].contains(MOUSE):&amp;#10;            highlighter.setPos(boxes[i].pos, log=False)&amp;#10;            highlighter.setSize(BOX_SIZE, log=False)&amp;#10;            highlighter.draw()&amp;#10;            break&amp;#10;&amp;#10;    for i in range(N_BOXES):&amp;#10;        # Determine when to stop showing picture&amp;#10;        if visible[i] and t - visible_t[i] &gt;= OBJ_DURATION:&amp;#10;            objs[i].setAutoDraw(False, log=False)&amp;#10;            if &quot;blank&quot; not in objs[i].name:&amp;#10;                found_fruits.append(objs[i])&amp;#10;                # Replace picture with blank&amp;#10;                objs[i] = visual.ImageStim(&amp;#10;                    win=win,&amp;#10;                    name=f&quot;{objs[i].name}_blank&quot;,&amp;#10;                    image=&quot;imgs/empty-box.png&quot;,&amp;#10;                    pos=BOXES_XY[i],&amp;#10;                    size=OBJ_SIZE&amp;#10;                )&amp;#10;            visible[i] = False&amp;#10;&amp;#10;    # Determine if the trial is completed&amp;#10;    if obj_count &gt;= n_fruits and sum(visible) &lt;= 0:&amp;#10;        # Immediately proceed to Part 2&amp;#10;        continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! SKIP_PART_1)) {&amp;#10;    if (update_time_elapsed) {&amp;#10;        task_time_elapsed = (t - task_time_start);&amp;#10;    }&amp;#10;    highlighter.setSize([0, 0], {&quot;log&quot;: false});&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if (visible[i]) {&amp;#10;            continue;&amp;#10;        }&amp;#10;        if (MOUSE.isPressedIn(boxes[i])) {&amp;#10;            if (first_click) {&amp;#10;                task_time_start = t;&amp;#10;                update_time_elapsed = true;&amp;#10;                first_click = false;&amp;#10;            }&amp;#10;            if ((! _pj.in_es6(&quot;blank&quot;, objs[i].name))) {&amp;#10;                obj_count += 1;&amp;#10;                if ((obj_count &gt;= n_fruits)) {&amp;#10;                    update_time_elapsed = false;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;_blank&quot;, objs[i].name)) {&amp;#10;                    n_commissions[i] += 1;&amp;#10;                } else {&amp;#10;                    n_omissions[i] += 1;&amp;#10;                }&amp;#10;            }&amp;#10;            clicked_boxes.push(boxes[i].name);&amp;#10;            click_times.push(task_time_elapsed);&amp;#10;            objs[i].setAutoDraw(true, {&quot;log&quot;: false});&amp;#10;            visible[i] = true;&amp;#10;            visible_t[i] = t;&amp;#10;            break;&amp;#10;        } else {&amp;#10;            if (boxes[i].contains(MOUSE)) {&amp;#10;                highlighter.setPos(boxes[i].pos, {&quot;log&quot;: false});&amp;#10;                highlighter.setSize(BOX_SIZE, {&quot;log&quot;: false});&amp;#10;                highlighter.draw();&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((visible[i] &amp;&amp; ((t - visible_t[i]) &gt;= OBJ_DURATION))) {&amp;#10;            objs[i].setAutoDraw(false, {&quot;log&quot;: false});&amp;#10;            if ((! _pj.in_es6(&quot;blank&quot;, objs[i].name))) {&amp;#10;                found_fruits.push(objs[i]);&amp;#10;                objs[i] = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `${objs[i].name}_blank`, &quot;image&quot;: &quot;imgs/empty-box.png&quot;, &quot;pos&quot;: BOXES_XY[i], &quot;size&quot;: OBJ_SIZE});&amp;#10;            }&amp;#10;            visible[i] = false;&amp;#10;        }&amp;#10;    }&amp;#10;    if (((obj_count &gt;= n_fruits) &amp;&amp; (util.sum(visible) &lt;= 0))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((! SKIP_PART_1)) {&amp;#10;    fruit_pos = ABOVE_BOXES_XY;&amp;#10;    found_count = 0;&amp;#10;    util.shuffle(found_fruits);&amp;#10;    for (var found_fruit, _pj_c = 0, _pj_a = found_fruits, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        found_fruit = _pj_a[_pj_c];&amp;#10;        found_fruit.pos = fruit_pos[found_count];&amp;#10;        found_fruit.autoDraw = true;&amp;#10;        found_count += 1;&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;clicked_boxes&quot;, clicked_boxes);&amp;#10;    psychoJS.experiment.addData(&quot;click_times&quot;, click_times);&amp;#10;    psychoJS.experiment.addData(&quot;time_taken_sec&quot;, click_times.pop());&amp;#10;    psychoJS.experiment.addData(&quot;correct_boxes&quot;, correct_boxes);&amp;#10;    psychoJS.experiment.addData(&quot;omission_errors&quot;, n_omissions);&amp;#10;    psychoJS.experiment.addData(&quot;commission_errors&quot;, n_commissions);&amp;#10;    total_errors = (util.sum(n_omissions) + util.sum(n_commissions));&amp;#10;    psychoJS.experiment.addData(&quot;total_errors&quot;, total_errors);&amp;#10;    highlighter.size = [0, 0];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;if not SKIP_PART_1:&amp;#10;    fruit_pos = ABOVE_BOXES_XY&amp;#10;    found_count = 0&amp;#10;&amp;#10;    # UPDATE: The order needs to be shuffled&amp;#10;    shuffle(found_fruits)&amp;#10;    for found_fruit in found_fruits:&amp;#10;        found_fruit.pos = fruit_pos[found_count]&amp;#10;        found_fruit.autoDraw = True&amp;#10;        found_count += 1&amp;#10;&amp;#10;    thisExp.addData(&quot;clicked_boxes&quot;, clicked_boxes)&amp;#10;    thisExp.addData(&quot;click_times&quot;, click_times)&amp;#10;    thisExp.addData(&quot;time_taken_sec&quot;, click_times.pop())&amp;#10;    thisExp.addData(&quot;correct_boxes&quot;, correct_boxes)&amp;#10;&amp;#10;    thisExp.addData(&quot;omission_errors&quot;, n_omissions)&amp;#10;    thisExp.addData(&quot;commission_errors&quot;, n_commissions)&amp;#10;&amp;#10;    total_errors = sum(n_omissions) + sum(n_commissions)&amp;#10;&amp;#10;    thisExp.addData(&quot;total_errors&quot;, total_errors)&amp;#10;&amp;#10;    highlighter.size = (0, 0)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="part1_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="part1_title">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="part1_title" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Find the fruits" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="part2">
      <CodeComponent name="part2_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="DRAGGING = false;&amp;#10;clicked_obj = null;&amp;#10;clicked_obj_name = &quot;_&quot;;&amp;#10;fruits_left = n_fruits;&amp;#10;first_click = true;&amp;#10;first_click_time = 0;&amp;#10;fruit_idx = null;&amp;#10;orig_pos = [];&amp;#10;for (var found_fruit, _pj_c = 0, _pj_a = found_fruits, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    found_fruit = _pj_a[_pj_c];&amp;#10;    orig_pos.push(found_fruit.pos);&amp;#10;}&amp;#10;choices = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    choices.push(null);&amp;#10;}&amp;#10;x = 0;&amp;#10;y = 0;&amp;#10;coords_x = [];&amp;#10;coords_y = [];&amp;#10;coords_t = [];&amp;#10;coords_objname = [];&amp;#10;NEXT.opacity = 0.1;&amp;#10;NEXT.autoDraw = true;&amp;#10;if ((USE_AUDIO &amp;&amp; (trial_name === &quot;Practice trial&quot;))) {&amp;#10;    aud_file = `${AUD_DIR}/8 boxes Slide 4.m4a`;&amp;#10;    SOUND = make_sound(&quot;slide4&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;DRAGGING = False&amp;#10;clicked_obj = None&amp;#10;clicked_obj_name = &quot;_&quot;&amp;#10;&amp;#10;fruits_left = n_fruits&amp;#10;&amp;#10;first_click = True&amp;#10;first_click_time = 0&amp;#10;&amp;#10;fruit_idx = None&amp;#10;orig_pos = []&amp;#10;for found_fruit in found_fruits:&amp;#10;    orig_pos.append(found_fruit.pos)&amp;#10;&amp;#10;choices = []&amp;#10;for i in range(N_BOXES):&amp;#10;    choices.append(None)&amp;#10;&amp;#10;# Mouse tracking&amp;#10;x = 0&amp;#10;y = 0&amp;#10;coords_x = []&amp;#10;coords_y = []&amp;#10;coords_t = []&amp;#10;coords_objname = []&amp;#10;&amp;#10;NEXT.opacity = 0.1&amp;#10;NEXT.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO and trial_name == &quot;Practice trial&quot;:&amp;#10;    aud_file = f&quot;{AUD_DIR}/8 boxes Slide 4.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide4&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;if fruits_left &gt; 0:&amp;#10;    time_since_start = t&amp;#10;    time_since_first_click = 0 if first_click else t - first_click_time&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L and fruits_left &lt; 1 and NEXT.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;if not DRAGGING:&amp;#10;    for i in range(len(found_fruits)):&amp;#10;        if MOUSE.isPressedIn(found_fruits[i]):&amp;#10;            if first_click:&amp;#10;                first_click_time = t&amp;#10;                first_click = False&amp;#10;            clicked_obj = found_fruits[i]&amp;#10;            clicked_obj_name = clicked_obj.name&amp;#10;            fruit_idx = i&amp;#10;            for j in range(N_BOXES):&amp;#10;                if choices[j] == clicked_obj.name:&amp;#10;                    choices[j] = None&amp;#10;                    fruits_left += 1&amp;#10;                    if fruits_left &gt; 0:&amp;#10;                        NEXT.opacity = 0.1&amp;#10;                    break&amp;#10;            DRAGGING = True&amp;#10;&amp;#10;if MOUSE_L:&amp;#10;    if DRAGGING:&amp;#10;        clicked_obj.pos = MOUSE.getPos()&amp;#10;        # Mouse tracking&amp;#10;        x, y = clicked_obj.pos&amp;#10;        if len(coords_x) == 0 or dist_sq(coords_x[-1], coords_y[-1], x, y) &gt; MIN_DIST_SQ:&amp;#10;            coords_x.append(round_dp(x))&amp;#10;            coords_y.append(round_dp(y))&amp;#10;            coords_t.append(round_dp(t))&amp;#10;            coords_objname.append(clicked_obj_name)&amp;#10;else:&amp;#10;    DRAGGING = False&amp;#10;    if clicked_obj is not None:&amp;#10;        for i in range(N_BOXES):&amp;#10;            if snapped(clicked_obj, boxes[i]):&amp;#10;                if choices[i] is None:&amp;#10;                    choices[i] = clicked_obj.name&amp;#10;                    fruits_left -= 1&amp;#10;                    if fruits_left &lt; 1:&amp;#10;                        NEXT.opacity = 1&amp;#10;                else:&amp;#10;                    clicked_obj.pos = orig_pos[fruit_idx]&amp;#10;                break&amp;#10;        clicked_obj = None&amp;#10;        clicked_obj_name = &quot;_&quot;&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    part2_text.text = f&quot;&quot;&quot;&amp;#10;time_since_start = {round(time_since_start, 3)}&amp;#10;time_since_first_click = {round(time_since_first_click, 3)}&amp;#10;fruits_left = {fruits_left}&amp;#10;choices = {choices}&amp;#10;clicked_obj_name = {clicked_obj_name}&amp;#10;fruit_idx = {fruit_idx}&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((fruits_left &gt; 0)) {&amp;#10;    time_since_start = t;&amp;#10;    time_since_first_click = (first_click ? 0 : (t - first_click_time));&amp;#10;}&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (((MOUSE_L &amp;&amp; (fruits_left &lt; 1)) &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((! DRAGGING)) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(found_fruits.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if (MOUSE.isPressedIn(found_fruits[i])) {&amp;#10;            if (first_click) {&amp;#10;                first_click_time = t;&amp;#10;                first_click = false;&amp;#10;            }&amp;#10;            clicked_obj = found_fruits[i];&amp;#10;            clicked_obj_name = clicked_obj.name;&amp;#10;            fruit_idx = i;&amp;#10;            for (var j, _pj_f = 0, _pj_d = util.range(N_BOXES), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                j = _pj_d[_pj_f];&amp;#10;                if ((choices[j] === clicked_obj.name)) {&amp;#10;                    choices[j] = null;&amp;#10;                    fruits_left += 1;&amp;#10;                    if ((fruits_left &gt; 0)) {&amp;#10;                        NEXT.opacity = 0.1;&amp;#10;                    }&amp;#10;                    break;&amp;#10;                }&amp;#10;            }&amp;#10;            DRAGGING = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (MOUSE_L) {&amp;#10;    if (DRAGGING) {&amp;#10;        clicked_obj.pos = MOUSE.getPos();&amp;#10;        [x, y] = clicked_obj.pos;&amp;#10;        if (((coords_x.length === 0) || (dist_sq(coords_x.slice((- 1))[0], coords_y.slice((- 1))[0], x, y) &gt; MIN_DIST_SQ))) {&amp;#10;            coords_x.push(round_dp(x));&amp;#10;            coords_y.push(round_dp(y));&amp;#10;            coords_t.push(round_dp(t));&amp;#10;            coords_objname.push(clicked_obj_name);&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    DRAGGING = false;&amp;#10;    if ((clicked_obj !== null)) {&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            if (snapped(clicked_obj, boxes[i])) {&amp;#10;                if ((choices[i] === null)) {&amp;#10;                    choices[i] = clicked_obj.name;&amp;#10;                    fruits_left -= 1;&amp;#10;                    if ((fruits_left &lt; 1)) {&amp;#10;                        NEXT.opacity = 1;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    clicked_obj.pos = orig_pos[fruit_idx];&amp;#10;                }&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        clicked_obj = null;&amp;#10;        clicked_obj_name = &quot;_&quot;;&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    part2_text.text = `&amp;#10;time_since_start = ${round(time_since_start, 3)}&amp;#10;time_since_first_click = ${round(time_since_first_click, 3)}&amp;#10;fruits_left = ${fruits_left}&amp;#10;choices = ${choices}&amp;#10;clicked_obj_name = ${clicked_obj_name}&amp;#10;fruit_idx = ${fruit_idx}&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="NEXT.autoDraw = false;&amp;#10;for (var found_fruit, _pj_c = 0, _pj_a = found_fruits, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    found_fruit = _pj_a[_pj_c];&amp;#10;    found_fruit.autoDraw = false;&amp;#10;}&amp;#10;if ((USE_AUDIO &amp;&amp; (trial_name === &quot;Practice trial&quot;))) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;score = 0;&amp;#10;errors = 0;&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if ((choices[i] === null)) {&amp;#10;        choices[i] = &quot;-&quot;;&amp;#10;    }&amp;#10;    if ((correct_choices[i] === null)) {&amp;#10;        correct_choices[i] = &quot;-&quot;;&amp;#10;    }&amp;#10;    if ((choices[i] !== correct_choices[i])) {&amp;#10;        errors += 1;&amp;#10;    } else {&amp;#10;        if ((correct_choices[i] !== &quot;-&quot;)) {&amp;#10;            score += 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;choices&quot;, choices);&amp;#10;psychoJS.experiment.addData(&quot;correct_choices&quot;, correct_choices);&amp;#10;psychoJS.experiment.addData(&quot;score&quot;, score);&amp;#10;psychoJS.experiment.addData(&quot;errors&quot;, errors);&amp;#10;psychoJS.experiment.addData(&quot;time_since_start&quot;, time_since_start);&amp;#10;psychoJS.experiment.addData(&quot;time_since_first_click&quot;, time_since_first_click);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;psychoJS.experiment.addData(&quot;coords_x&quot;, coords_x);&amp;#10;psychoJS.experiment.addData(&quot;coords_y&quot;, coords_y);&amp;#10;psychoJS.experiment.addData(&quot;coords_t&quot;, coords_t);&amp;#10;psychoJS.experiment.addData(&quot;coords_objname&quot;, coords_objname);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;for found_fruit in found_fruits:&amp;#10;    found_fruit.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO and trial_name == &quot;Practice trial&quot;:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;score = 0&amp;#10;errors = 0&amp;#10;for i in range(N_BOXES):&amp;#10;    if choices[i] is None:&amp;#10;        choices[i] = &quot;-&quot;&amp;#10;    if correct_choices[i] is None:&amp;#10;        correct_choices[i] = &quot;-&quot;&amp;#10;    if choices[i] != correct_choices[i]:&amp;#10;        errors += 1&amp;#10;    elif correct_choices[i] != &quot;-&quot;:&amp;#10;        score += 1&amp;#10;&amp;#10;thisExp.addData(&quot;choices&quot;, choices)&amp;#10;thisExp.addData(&quot;correct_choices&quot;, correct_choices)&amp;#10;&amp;#10;thisExp.addData(&quot;score&quot;, score)&amp;#10;thisExp.addData(&quot;errors&quot;, errors)&amp;#10;&amp;#10;thisExp.addData(&quot;time_since_start&quot;, time_since_start)&amp;#10;thisExp.addData(&quot;time_since_first_click&quot;, time_since_first_click)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;&amp;#10;# Mouse tracking&amp;#10;thisExp.addData(&quot;coords_x&quot;, coords_x)&amp;#10;thisExp.addData(&quot;coords_y&quot;, coords_y)&amp;#10;thisExp.addData(&quot;coords_t&quot;, coords_t)&amp;#10;thisExp.addData(&quot;coords_objname&quot;, coords_objname)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="part2_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="part2_title">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="part2_title" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Put the fruits back in their original boxes" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="part2_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="part2_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="begin">
      <CodeComponent name="begin_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;expVersion = &quot;2022.09.23&quot;&amp;#10;AUD_DIR = &quot;resources/aud&quot;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;&amp;#10;SLIDES_DIR = f&quot;{IMGS_DIR}/slides&quot;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions_v3.csv&quot;&amp;#10;&amp;#10;MAX_TRIALS = int(expInfo[&quot;Max number of trials&quot;])&amp;#10;SHOW_DEBUG = expInfo[&quot;Debug&quot;] == &quot;Yes&quot;&amp;#10;USE_AUDIO = expInfo[&quot;Audio&quot;] == &quot;Yes&quot;&amp;#10;&amp;#10;selected_rows = f&quot;0:{MAX_TRIALS + 1}&quot;&amp;#10;&amp;#10;SKIP_PART_1 = True&amp;#10;RANDOMIZE_FRUITS = True&amp;#10;RANDOMIZE_POSITIONS = False&amp;#10;&amp;#10;MIN_DIST_SQ = 0.005 * 0.005  # Mouse tracking&amp;#10;&amp;#10;# &quot;Next&quot; button&amp;#10;NEXT_POS = (0, -0.39)&amp;#10;#NEXT_SIZE = (0.26, 0.1)&amp;#10;#NEXT = make_button(&quot;continue&quot;, &quot;Continue&quot;, NEXT_POS, NEXT_SIZE)&amp;#10;NEXT_SIZE = (0.1 / 104 * 254, 0.1)&amp;#10;NEXT = make_img(&quot;continue&quot;, f&quot;{IMGS_DIR}/continue.png&quot;, NEXT_POS, NEXT_SIZE)&amp;#10;&amp;#10;# Global mouse&amp;#10;MOUSE = core.Mouse(win=win)&amp;#10;MOUSE_L = 0&amp;#10;MOUSE_L_prev = 0&amp;#10;&amp;#10;# Global sound&amp;#10;SOUND = None&amp;#10;&amp;#10;IMG_NAMES = (&amp;#10;    &quot;apple&quot;,&amp;#10;    &quot;banana&quot;,&amp;#10;    &quot;cherries&quot;,&amp;#10;    &quot;grapes&quot;,&amp;#10;    &quot;orange&quot;,&amp;#10;#    &quot;pineapple&quot;,  # very distorted, have to use non-square sizes&amp;#10;    &quot;strawberry&quot;,&amp;#10;    &quot;watermelon&quot;,&amp;#10;)&amp;#10;&amp;#10;#N_FRUITS = 7&amp;#10;N_FRUITS = len(IMG_NAMES)&amp;#10;N_BOXES = 8&amp;#10;NCOL = 4&amp;#10;&amp;#10;# Lengths (% screen height) ----------------------&amp;#10;&amp;#10;BOX_SIZE = (0.2, 0.2)&amp;#10;OBJ_SIZE = (0.16, 0.16)&amp;#10;CONT_BUTTON_SIZE = (0.32, 0.112)&amp;#10;&amp;#10;ABOVE_BOXES_X0 = -0.4&amp;#10;ABOVE_BOXES_Y0 = 0.2&amp;#10;ABOVE_BOXES_XY = []&amp;#10;for i in range(N_FRUITS):&amp;#10;    ABOVE_BOXES_XY.append((&amp;#10;        ABOVE_BOXES_X0 + i * OBJ_SIZE[1],&amp;#10;        ABOVE_BOXES_Y0&amp;#10;    ))&amp;#10;&amp;#10;BOXES_X0 = -0.3&amp;#10;BOXES_Y0 = 0&amp;#10;BOXES_XY = []&amp;#10;for i in range(N_BOXES):&amp;#10;    BOXES_XY.append((&amp;#10;        BOXES_X0 + (i % NCOL) * BOX_SIZE[0],&amp;#10;        BOXES_Y0 - int(i / NCOL) * BOX_SIZE[1]&amp;#10;    ))&amp;#10;&amp;#10;# Boxes ------------------------------------------&amp;#10;&amp;#10;boxes = []&amp;#10;for i in range(N_BOXES):&amp;#10;    boxes.append(visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=f&quot;box{i + 1}&quot;,&amp;#10;        image=&quot;resources/imgs/box.png&quot;,&amp;#10;        pos=BOXES_XY[i],&amp;#10;        size=BOX_SIZE,&amp;#10;        opacity=0.5&amp;#10;    ))&amp;#10;&amp;#10;# Objects (fruits) -------------------------------&amp;#10;&amp;#10;fruit_basket = []&amp;#10;for i in range(N_FRUITS):&amp;#10;    fruit_basket.append(visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=IMG_NAMES[i],&amp;#10;        image=f&quot;resources/imgs/{IMG_NAMES[i]}.png&quot;,&amp;#10;        pos=(0, 0),&amp;#10;        size=OBJ_SIZE&amp;#10;    ))&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="expVersion = &quot;2022.09.23&quot;;&amp;#10;AUD_DIR = &quot;resources/aud&quot;;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;;&amp;#10;SLIDES_DIR = `${IMGS_DIR}/slides`;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions_v3.csv&quot;;&amp;#10;MAX_TRIALS = Number.parseInt(expInfo[&quot;Max number of trials&quot;]);&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;USE_AUDIO = (expInfo[&quot;Audio&quot;] === &quot;Yes&quot;);&amp;#10;selected_rows = `0:${(MAX_TRIALS + 1)}`;&amp;#10;SKIP_PART_1 = true;&amp;#10;RANDOMIZE_FRUITS = true;&amp;#10;RANDOMIZE_POSITIONS = false;&amp;#10;MIN_DIST_SQ = (0.005 * 0.005);&amp;#10;NEXT_POS = [0, (- 0.39)];&amp;#10;NEXT_SIZE = [((0.1 / 104) * 254), 0.1];&amp;#10;NEXT = make_img(&quot;continue&quot;, `${IMGS_DIR}/continue.png`, NEXT_POS, NEXT_SIZE);&amp;#10;MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;MOUSE_L = 0;&amp;#10;MOUSE_L_prev = 0;&amp;#10;SOUND = null;&amp;#10;IMG_NAMES = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherries&quot;, &quot;grapes&quot;, &quot;orange&quot;, &quot;strawberry&quot;, &quot;watermelon&quot;];&amp;#10;N_FRUITS = IMG_NAMES.length;&amp;#10;N_BOXES = 8;&amp;#10;NCOL = 4;&amp;#10;BOX_SIZE = [0.2, 0.2];&amp;#10;OBJ_SIZE = [0.16, 0.16];&amp;#10;CONT_BUTTON_SIZE = [0.32, 0.112];&amp;#10;ABOVE_BOXES_X0 = (- 0.4);&amp;#10;ABOVE_BOXES_Y0 = 0.2;&amp;#10;ABOVE_BOXES_XY = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_FRUITS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    ABOVE_BOXES_XY.push([(ABOVE_BOXES_X0 + (i * OBJ_SIZE[1])), ABOVE_BOXES_Y0]);&amp;#10;}&amp;#10;BOXES_X0 = (- 0.3);&amp;#10;BOXES_Y0 = 0;&amp;#10;BOXES_XY = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    BOXES_XY.push([(BOXES_X0 + ((i % NCOL) * BOX_SIZE[0])), (BOXES_Y0 - (Number.parseInt((i / NCOL)) * BOX_SIZE[1]))]);&amp;#10;}&amp;#10;boxes = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    boxes.push(new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `box${(i + 1)}`, &quot;image&quot;: &quot;resources/imgs/box.png&quot;, &quot;pos&quot;: BOXES_XY[i], &quot;size&quot;: BOX_SIZE, &quot;opacity&quot;: 0.5}));&amp;#10;}&amp;#10;fruit_basket = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_FRUITS), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    fruit_basket.push(new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: IMG_NAMES[i], &quot;image&quot;: `resources/imgs/${IMG_NAMES[i]}.png`, &quot;pos&quot;: [0, 0], &quot;size&quot;: OBJ_SIZE}));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    boxes[i].autoDraw = true;&amp;#10;}&amp;#10;NEXT.autoDraw = true;&amp;#10;fruit1 = fruit_basket[0];&amp;#10;fruit1.pos = BOXES_XY[0];&amp;#10;fruit1.autoDraw = true;&amp;#10;fruit2 = fruit_basket[1];&amp;#10;fruit2.pos = BOXES_XY[7];&amp;#10;fruit2.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/8 boxes Slide 1.m4a`;&amp;#10;    SOUND = make_sound(&quot;slide1&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;for i in range(N_BOXES):&amp;#10;    boxes[i].autoDraw = True&amp;#10;&amp;#10;NEXT.autoDraw = True&amp;#10;&amp;#10;fruit1 = fruit_basket[0]&amp;#10;fruit1.pos = BOXES_XY[0]&amp;#10;fruit1.autoDraw = True&amp;#10;fruit2 = fruit_basket[1]&amp;#10;fruit2.pos = BOXES_XY[7]&amp;#10;fruit2.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/8 boxes Slide 1.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide1&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L and NEXT.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    begin_text.text = f&quot;&quot;&quot;&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;selected_rows = {selected_rows}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if ((MOUSE_L &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    begin_text.text = `&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}&amp;#10;selected_rows = ${selected_rows}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/8 boxes End of Game.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;end&quot;, aud_file)&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/8 boxes End of Game.m4a`;&amp;#10;    SOUND = make_sound(&quot;end&quot;, aud_file);&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="NEXT.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="begin_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="functions_g">
        <Param val="&amp;#10;def make_button(name, text, pos, size):&amp;#10;    return visual.ButtonStim(&amp;#10;        win=win, &amp;#10;        text=text,&amp;#10;    #    font=&quot;Arvo&quot;,&amp;#10;        pos=pos,&amp;#10;        letterHeight=0.04,&amp;#10;        size=size,&amp;#10;        borderWidth=0.005,&amp;#10;        fillColor=&quot;lightgrey&quot;,&amp;#10;        borderColor=&quot;darkgrey&quot;,&amp;#10;        color=&quot;black&quot;,&amp;#10;        colorSpace=&quot;rgb&quot;,&amp;#10;        opacity=None,&amp;#10;        bold=True,&amp;#10;        italic=False,&amp;#10;        padding=None,&amp;#10;        anchor=&quot;center&quot;,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_sound(name, filepath):&amp;#10;    return sound.Sound(&amp;#10;        win=win,&amp;#10;        value=filepath,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_img(name, file_name, pos, size, opacity):&amp;#10;    return visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_name,&amp;#10;        pos=pos,&amp;#10;        size=size,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def within_box(obj, box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates &amp;#10;    should be less than the square of half the &amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    &quot;&quot;&quot;&amp;#10;    obj_x, obj_y = obj.pos&amp;#10;    box_x, box_y = box.pos&amp;#10;    box_w, box_h = box.size&amp;#10;    dx, dy = obj_x - box_x, obj_y - box_y&amp;#10;    hw, hh = box_w / 2, box_h / 2&amp;#10;    return dx * dx &lt; hw * hw and dy * dy &lt; hh * hh&amp;#10;&amp;#10;def snapped(obj1, obj2, func=within_box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be &amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    &quot;&quot;&quot;&amp;#10;    if func(obj1, obj2):&amp;#10;        obj1.pos = obj2.pos&amp;#10;        return True&amp;#10;    return False&amp;#10;&amp;#10;def dist_sq(x1, y1, x2, y2):&amp;#10;    dx, dy = x2 - x1, y2 - y1&amp;#10;    return (dx * dx) + (dy * dy)&amp;#10;&amp;#10;def round_dp(x, dp=5):&amp;#10;    num, = (10 ** dp),&amp;#10;    return round(x * num) / num&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="function make_button(name, text, pos, size) {&amp;#10;    return new visual.ButtonStim({&quot;win&quot;: psychoJS.window, &quot;text&quot;: text, &quot;pos&quot;: pos, &quot;letterHeight&quot;: 0.04, &quot;size&quot;: size, &quot;borderWidth&quot;: 0.005, &quot;fillColor&quot;: &quot;lightgrey&quot;, &quot;borderColor&quot;: &quot;darkgrey&quot;, &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;bold&quot;: true, &quot;italic&quot;: false, &quot;padding&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_sound(name, filepath) {&amp;#10;    return new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: filepath, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_img(name, file_name, pos, size, opacity) {&amp;#10;    return new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_name, &quot;pos&quot;: pos, &quot;size&quot;: size, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function within_box(obj, box) {&amp;#10;    /*&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates&amp;#10;    should be less than the square of half the&amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    */&amp;#10;    var box_h, box_w, box_x, box_y, dx, dy, hh, hw, obj_x, obj_y;&amp;#10;    [obj_x, obj_y] = obj.pos;&amp;#10;    [box_x, box_y] = box.pos;&amp;#10;    [box_w, box_h] = box.size;&amp;#10;    [dx, dy] = [(obj_x - box_x), (obj_y - box_y)];&amp;#10;    [hw, hh] = [(box_w / 2), (box_h / 2)];&amp;#10;    return (((dx * dx) &lt; (hw * hw)) &amp;&amp; ((dy * dy) &lt; (hh * hh)));&amp;#10;}&amp;#10;function snapped(obj1, obj2, func = within_box) {&amp;#10;    /*&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be&amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    */&amp;#10;    if (func(obj1, obj2)) {&amp;#10;        obj1.pos = obj2.pos;&amp;#10;        return true;&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;function dist_sq(x1, y1, x2, y2) {&amp;#10;    var dx, dy;&amp;#10;    [dx, dy] = [(x2 - x1), (y2 - y1)];&amp;#10;    return ((dx * dx) + (dy * dy));&amp;#10;}&amp;#10;function round_dp(x, dp = 5) {&amp;#10;    var num;&amp;#10;    [num] = [Math.pow(10, dp)];&amp;#10;    return (Math.round((x * num)) / num);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="functions_g" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="beginInst1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.025" valType="num" updates="constant" name="letterHeight"/>
        <Param val="beginInst1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Instructions:&amp;#10;&amp;#10;There will be 8 boxes on the screen. Some will contain a fruit, some will be empty (contain a red &quot;X&quot;). At the start of each trial, the positions of all the fruits will be revealed for a short period of time before being hidden.&amp;#10;&amp;#10;You may then click/tap on any of the boxes to show its contents. The contents will be visible for some time, during which you may not click/tap on that box again, but you may click/tap on other boxes. Selecting a box with a fruit will remove the fruit from the box, making it empty.&amp;#10;&amp;#10;Find all the fruits as fast as you can while avoiding the empty boxes. The fruits will appear at the top of the screen as you find them. Once all are found, drag each fruit back into their original boxes to complete the trial.&amp;#10;&amp;#10;There will be 1 practice trial, followed by 6 trials.&amp;#10;&amp;#10;Whenever you are ready, click/tap on 'continue' and the next trial will begin immediately (same applies for the following trials)." valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="0.98" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="beginInst2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.025" valType="num" updates="constant" name="letterHeight"/>
        <Param val="beginInst2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Instructions:&amp;#10;&amp;#10;There will be 8 boxes on the screen. Some will contain a fruit, some will be empty.&amp;#10;&amp;#10;At the start of each trial, the positions of all the fruits will be revealed for a short period of time. The fruits will then appear above the boxes.&amp;#10;&amp;#10;You may then click and drag each fruit back into their original boxes to complete the trial.&amp;#10;&amp;#10;There will be 1 practice trial, followed by 10 trials.&amp;#10;&amp;#10;Whenever you are ready, click/tap on 'continue' and the next trial will begin." valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="0.98" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="begin_inst_3">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin_inst_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="1st Practice! &amp;#10;Remember the place of the fruit!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="begin_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="gate">
      <CodeComponent name="gate_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;within_reveal_time = true;&amp;#10;objs = [];&amp;#10;correct_choices = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_BOXES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    boxes[i].autoDraw = true;&amp;#10;    objs.push(null);&amp;#10;    correct_choices.push(null);&amp;#10;}&amp;#10;if (RANDOMIZE_POSITIONS) {&amp;#10;    box_idxs = util.range(N_BOXES);&amp;#10;    util.shuffle(box_idxs);&amp;#10;    idxs = box_idxs;&amp;#10;} else {&amp;#10;    idxs = [pos1, pos2, pos3, pos4, pos5, pos6];&amp;#10;}&amp;#10;idxs = idxs.slice(0, n_fruits);&amp;#10;if (RANDOMIZE_FRUITS) {&amp;#10;    util.shuffle(fruit_basket);&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(n_fruits), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    objs[idxs[i]] = fruit_basket[i];&amp;#10;    objs[idxs[i]].pos = BOXES_XY[idxs[i]];&amp;#10;    correct_choices[idxs[i]] = fruit_basket[i].name;&amp;#10;    if ((trial_name === &quot;Practice trial&quot;)) {&amp;#10;        objs[idxs[i]].autoDraw = true;&amp;#10;    }&amp;#10;}&amp;#10;found_fruits = [];&amp;#10;if ((trial_name === &quot;Practice trial&quot;)) {&amp;#10;    NEXT.opacity = 0.1;&amp;#10;    NEXT.autoDraw = true;&amp;#10;}&amp;#10;if (USE_AUDIO) {&amp;#10;    if ((trial_name === &quot;Practice trial&quot;)) {&amp;#10;        aud_file = `${AUD_DIR}/8 boxes Slide 3_Trimmed.m4a`;&amp;#10;    } else {&amp;#10;        aud_file = `${AUD_DIR}/8 boxes Trials 1-8 Recall.m4a`;&amp;#10;    }&amp;#10;    SOUND = make_sound(&quot;slide3&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;within_reveal_time = True&amp;#10;&amp;#10;objs = []&amp;#10;correct_choices = []&amp;#10;for i in range(N_BOXES):&amp;#10;    boxes[i].autoDraw = True&amp;#10;    objs.append(None)&amp;#10;    correct_choices.append(None)&amp;#10;&amp;#10;if RANDOMIZE_POSITIONS:&amp;#10;    box_idxs = range(N_BOXES)&amp;#10;    shuffle(box_idxs)&amp;#10;    idxs = box_idxs&amp;#10;else:&amp;#10;    idxs = [pos1, pos2, pos3, pos4, pos5, pos6]&amp;#10;idxs = idxs[:n_fruits]&amp;#10;&amp;#10;if RANDOMIZE_FRUITS:&amp;#10;    shuffle(fruit_basket)&amp;#10;&amp;#10;&amp;#10;for i in range(n_fruits):&amp;#10;    objs[idxs[i]] = fruit_basket[i]&amp;#10;    objs[idxs[i]].pos = BOXES_XY[idxs[i]]&amp;#10;    correct_choices[idxs[i]] = fruit_basket[i].name &amp;#10;    if trial_name == &quot;Practice trial&quot;:&amp;#10;        #show object directly&amp;#10;        objs[idxs[i]].autoDraw = True&amp;#10;    &amp;#10;found_fruits = []&amp;#10;&amp;#10;if trial_name == &quot;Practice trial&quot;:&amp;#10;    NEXT.opacity = 0.1&amp;#10;    NEXT.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    if trial_name == &quot;Practice trial&quot;:&amp;#10;        #aud_file = f&quot;{AUD_DIR}/8 boxes Slide 3.m4a&quot;&amp;#10;        aud_file = f&quot;{AUD_DIR}/8 boxes Slide 3_Trimmed.m4a&quot;&amp;#10;    else:&amp;#10;        aud_file = f&quot;{AUD_DIR}/8 boxes Trials 1-8 Recall.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide3&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;if trial_name != &quot;Practice trial&quot; and t &gt;= SOUND_DUR:&amp;#10;    #show object after sound play completed&amp;#10;    for i in range(n_fruits):&amp;#10;        objs[idxs[i]] = fruit_basket[i] &amp;#10;        objs[idxs[i]].autoDraw = True&amp;#10;&amp;#10;disappear_time_point = reveal_seconds&amp;#10;if trial_name != &quot;Practice trial&quot;:&amp;#10;    disappear_time_point = SOUND_DUR + reveal_seconds&amp;#10;    &amp;#10;if within_reveal_time and t &gt; disappear_time_point:&amp;#10;    within_reveal_time = False&amp;#10;    NEXT.opacity = 1&amp;#10;&amp;#10;    for obj in objs:&amp;#10;        if obj is not None:&amp;#10;            obj.autoDraw = False&amp;#10;&amp;#10;    if SKIP_PART_1:&amp;#10;        for obj in objs:&amp;#10;            if obj is not None:&amp;#10;                found_fruits.append(obj)&amp;#10;        fruit_pos = ABOVE_BOXES_XY&amp;#10;        found_count = 0&amp;#10;        # UPDATE: The order needs to be shuffled&amp;#10;        shuffle(found_fruits)&amp;#10;        for found_fruit in found_fruits:&amp;#10;            found_fruit.pos = fruit_pos[found_count]&amp;#10;            found_fruit.autoDraw = True&amp;#10;            found_count += 1&amp;#10;&amp;#10;    if trial_name != &quot;Practice trial&quot;:&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;if not within_reveal_time:&amp;#10;    MOUSE_L = MOUSE.getPressed()[0]&amp;#10;    if MOUSE_L_prev != MOUSE_L:&amp;#10;        MOUSE_L_prev = MOUSE_L&amp;#10;        if MOUSE_L and NEXT.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    gate_text.text = f&quot;&quot;&quot;&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((trial_name !== &quot;Practice trial&quot;) &amp;&amp; (t &gt;= SOUND_DUR))) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(n_fruits), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        objs[idxs[i]] = fruit_basket[i];&amp;#10;        objs[idxs[i]].autoDraw = true;&amp;#10;    }&amp;#10;}&amp;#10;disappear_time_point = reveal_seconds;&amp;#10;if ((trial_name !== &quot;Practice trial&quot;)) {&amp;#10;    disappear_time_point = (SOUND_DUR + reveal_seconds);&amp;#10;}&amp;#10;if ((within_reveal_time &amp;&amp; (t &gt; disappear_time_point))) {&amp;#10;    within_reveal_time = false;&amp;#10;    NEXT.opacity = 1;&amp;#10;    for (var obj, _pj_c = 0, _pj_a = objs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        obj = _pj_a[_pj_c];&amp;#10;        if ((obj !== null)) {&amp;#10;            obj.autoDraw = false;&amp;#10;        }&amp;#10;    }&amp;#10;    if (SKIP_PART_1) {&amp;#10;        for (var obj, _pj_c = 0, _pj_a = objs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            obj = _pj_a[_pj_c];&amp;#10;            if ((obj !== null)) {&amp;#10;                found_fruits.push(obj);&amp;#10;            }&amp;#10;        }&amp;#10;        fruit_pos = ABOVE_BOXES_XY;&amp;#10;        found_count = 0;&amp;#10;        util.shuffle(found_fruits);&amp;#10;        for (var found_fruit, _pj_c = 0, _pj_a = found_fruits, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            found_fruit = _pj_a[_pj_c];&amp;#10;            found_fruit.pos = fruit_pos[found_count];&amp;#10;            found_fruit.autoDraw = true;&amp;#10;            found_count += 1;&amp;#10;        }&amp;#10;    }&amp;#10;    if ((trial_name !== &quot;Practice trial&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((! within_reveal_time)) {&amp;#10;    MOUSE_L = MOUSE.getPressed()[0];&amp;#10;    if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;        MOUSE_L_prev = MOUSE_L;&amp;#10;        if ((MOUSE_L &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    gate_text.text = `&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="NEXT.autoDraw = false;&amp;#10;if ((USE_AUDIO &amp;&amp; (trial_name === &quot;Practice trial&quot;))) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO and trial_name == &quot;Practice trial&quot;:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="gate_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="gate_title">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="gate_title" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$trial_name" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="gate_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="gate_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="begin2">
      <CodeComponent name="begin2_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="NEXT.autoDraw = true;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/8 boxes Slide 2.m4a`;&amp;#10;    SOUND = make_sound(&quot;slide2&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;N_FRAMES = Number.parseInt((1 / frameDur));&amp;#10;HN_FRAMES = Number.parseInt((N_FRAMES / 2));&amp;#10;fruit1_start = ABOVE_BOXES_XY[0];&amp;#10;fruit1_end = fruit1.pos;&amp;#10;fruit2_start = ABOVE_BOXES_XY[1];&amp;#10;fruit2_end = fruit2.pos;&amp;#10;xx1 = [];&amp;#10;yy1 = [];&amp;#10;xx2 = [];&amp;#10;yy2 = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(HN_FRAMES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    xx1.push((fruit1_start[0] + (((fruit1_end[0] - fruit1_start[0]) / HN_FRAMES) * i)));&amp;#10;    yy1.push((fruit1_start[1] + (((fruit1_end[1] - fruit1_start[1]) / HN_FRAMES) * i)));&amp;#10;    xx2.push(fruit2_start[0]);&amp;#10;    yy2.push(fruit2_start[1]);&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_FRAMES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    xx1.push(fruit1_end[0]);&amp;#10;    yy1.push(fruit1_end[1]);&amp;#10;    xx2.push((fruit2_start[0] + (((fruit2_end[0] - fruit2_start[0]) / N_FRAMES) * i)));&amp;#10;    yy2.push((fruit2_start[1] + (((fruit2_end[1] - fruit2_start[1]) / N_FRAMES) * i)));&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(HN_FRAMES), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    xx1.push(fruit1_end[0]);&amp;#10;    yy1.push(fruit1_end[1]);&amp;#10;    xx2.push(fruit2_end[0]);&amp;#10;    yy2.push(fruit2_end[1]);&amp;#10;}&amp;#10;idx = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;NEXT.autoDraw = True&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/8 boxes Slide 2.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;slide2&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND.play()&amp;#10;&amp;#10;# Animation loop:&amp;#10;# - 0.5 sec for fruit 1&amp;#10;# - 1.0 sec for fruit 2&amp;#10;# - 0.5 sec delay&amp;#10;N_FRAMES = int(1 / frameDur)&amp;#10;HN_FRAMES = int(N_FRAMES / 2)&amp;#10;&amp;#10;fruit1_start = ABOVE_BOXES_XY[0]&amp;#10;fruit1_end = fruit1.pos&amp;#10;fruit2_start = ABOVE_BOXES_XY[1]&amp;#10;fruit2_end = fruit2.pos&amp;#10;&amp;#10;# Define fruits' positions at each point in cycle&amp;#10;xx1 = []&amp;#10;yy1 = []&amp;#10;xx2 = []&amp;#10;yy2 = []&amp;#10;for i in range(HN_FRAMES):&amp;#10;    xx1.append(fruit1_start[0] + (fruit1_end[0] - fruit1_start[0]) / HN_FRAMES * i)&amp;#10;    yy1.append(fruit1_start[1] + (fruit1_end[1] - fruit1_start[1]) / HN_FRAMES * i)&amp;#10;    xx2.append(fruit2_start[0])&amp;#10;    yy2.append(fruit2_start[1])&amp;#10;for i in range(N_FRAMES):&amp;#10;    xx1.append(fruit1_end[0])&amp;#10;    yy1.append(fruit1_end[1])&amp;#10;    xx2.append(fruit2_start[0] + (fruit2_end[0] - fruit2_start[0]) / N_FRAMES * i)&amp;#10;    yy2.append(fruit2_start[1] + (fruit2_end[1] - fruit2_start[1]) / N_FRAMES * i)&amp;#10;for i in range(HN_FRAMES):&amp;#10;    xx1.append(fruit1_end[0])&amp;#10;    yy1.append(fruit1_end[1])&amp;#10;    xx2.append(fruit2_end[0])&amp;#10;    yy2.append(fruit2_end[1])&amp;#10;&amp;#10;idx = 0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="&amp;#10;# Move fruits during cycle&amp;#10;idx = frameN % (2 * HN_FRAMES + N_FRAMES)&amp;#10;fruit1.pos = (xx1[idx], yy1[idx])&amp;#10;fruit2.pos = (xx2[idx], yy2[idx])&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L and NEXT.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    begin2_text.text = f&quot;&quot;&quot;&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="idx = (frameN % ((2 * HN_FRAMES) + N_FRAMES));&amp;#10;fruit1.pos = [xx1[idx], yy1[idx]];&amp;#10;fruit2.pos = [xx2[idx], yy2[idx]];&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if ((MOUSE_L &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    begin2_text.text = `&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="NEXT.autoDraw = false;&amp;#10;fruit1.autoDraw = false;&amp;#10;fruit2.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;# Hide fruits after cycle&amp;#10;fruit1.autoDraw = False&amp;#10;fruit2.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="begin2_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="begin2_inst">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin2_inst" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Put the fruits back in their original boxes!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="begin2_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="num" updates="constant" name="letterHeight"/>
        <Param val="begin2_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="begin"/>
    <Routine name="begin2"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="$selected_rows" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="gate"/>
    <Routine name="part1"/>
    <Routine name="part2"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
